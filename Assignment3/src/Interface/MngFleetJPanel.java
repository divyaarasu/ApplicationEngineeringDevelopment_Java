/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Fleet;
import Business.FleetDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DivyaThanigaiArasu
 */
public class MngFleetJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private FleetDirectory fleetDirectory;

    /**
     * Creates new form MngFleetJPanel
     */
    MngFleetJPanel(JPanel userProcessContainer, FleetDirectory fleetDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.fleetDirectory = fleetDirectory;
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tblFleet.getModel();
        lblDate.setText(Fleet.updatedDate);
        dtm.setRowCount(0);
        for (Fleet fleet : fleetDirectory.getFleetCatalog()) {
            Object[] row = new Object[9];
            row[0] = fleet;
            row[1] = fleet.getModel_num();
            row[2] = fleet.getSerial_num();
            row[3] = fleet.getManufactured_year();
            row[4] = fleet.getMin_seats();
            row[5] = fleet.getMax_seats();
            row[6] = fleet.getAvailble_city();
            row[7] = fleet.isAvailable() ? "Yes" : "No";
            row[8] = fleet.isMaintenance_certificate() ? "Not Expired" : "Expired";
            dtm.addRow(row);
        }
    }

    public void populateTable(ArrayList<Fleet> f) {
        DefaultTableModel dtm = (DefaultTableModel) tblFleet.getModel();
        dtm.setRowCount(0);
        for (Fleet fleet : f) {
            Object[] row = new Object[9];
            row[0] = fleet;
            row[1] = fleet.getModel_num();
            row[2] = fleet.getSerial_num();
            row[3] = fleet.getManufactured_year();
            row[4] = fleet.getMin_seats();
            row[5] = fleet.getMax_seats();
            row[6] = fleet.getAvailble_city();
            row[7] = fleet.isAvailable() ? "Yes" : "No";
            row[8] = fleet.isMaintenance_certificate() ? "Not Expired" : "Expired";
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFleet = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        btnSearchSerial = new javax.swing.JButton();
        txtSearchSerial = new javax.swing.JTextField();
        btnSearchManYr = new javax.swing.JButton();
        txtSerachManYr = new javax.swing.JTextField();
        btnSearchAvail = new javax.swing.JButton();
        btnSearchAllAvail = new javax.swing.JButton();
        btnSearchBrand = new javax.swing.JButton();
        txtSearchBrand = new javax.swing.JTextField();
        btnSearchModel = new javax.swing.JButton();
        txtSearchModel = new javax.swing.JTextField();
        btnSearchExpM = new javax.swing.JButton();
        btnSearchCity = new javax.swing.JButton();
        txtSearchCity = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtSeatMin = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtSeatMax = new javax.swing.JTextField();
        btnSearchSeat = new javax.swing.JButton();
        btnAllManufac = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblManufacturer = new javax.swing.JTable();
        btnClearFilter = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();

        setBackground(new java.awt.Color(102, 102, 102));

        tblFleet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Model no.", "Serial no.", "Manufactured Yr.", "Min. seats", "Max. seats", "City", "Availability", "Maintenance Certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFleet);
        if (tblFleet.getColumnModel().getColumnCount() > 0) {
            tblFleet.getColumnModel().getColumn(0).setResizable(false);
            tblFleet.getColumnModel().getColumn(1).setResizable(false);
            tblFleet.getColumnModel().getColumn(2).setResizable(false);
            tblFleet.getColumnModel().getColumn(3).setResizable(false);
            tblFleet.getColumnModel().getColumn(4).setResizable(false);
            tblFleet.getColumnModel().getColumn(5).setResizable(false);
            tblFleet.getColumnModel().getColumn(6).setResizable(false);
            tblFleet.getColumnModel().getColumn(7).setResizable(false);
            tblFleet.getColumnModel().getColumn(8).setResizable(false);
        }

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnViewDetails.setText("View Details");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnSearchSerial.setText("Serial number search");
        btnSearchSerial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSerialActionPerformed(evt);
            }
        });

        btnSearchManYr.setText("Manufacture Yr. search");
        btnSearchManYr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchManYrActionPerformed(evt);
            }
        });

        btnSearchAvail.setText("Find first available car");
        btnSearchAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAvailActionPerformed(evt);
            }
        });

        btnSearchAllAvail.setText("Find all available cars");
        btnSearchAllAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchAllAvailActionPerformed(evt);
            }
        });

        btnSearchBrand.setText("Brand Search");
        btnSearchBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBrandActionPerformed(evt);
            }
        });

        txtSearchBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBrandActionPerformed(evt);
            }
        });

        btnSearchModel.setText("Model Search");
        btnSearchModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchModelActionPerformed(evt);
            }
        });

        btnSearchExpM.setText("Find all expired maintenance cars");
        btnSearchExpM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchExpMActionPerformed(evt);
            }
        });

        btnSearchCity.setText("Find avail. cars in City");
        btnSearchCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCityActionPerformed(evt);
            }
        });

        jLabel1.setText("Car with seats (minimum)");

        jLabel2.setText("Car with seats (maximum)");

        btnSearchSeat.setText("Search ");
        btnSearchSeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSeatActionPerformed(evt);
            }
        });

        btnAllManufac.setText("Get all Manufacturers ");
        btnAllManufac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllManufacActionPerformed(evt);
            }
        });

        tblManufacturer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Manufacturer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblManufacturer);
        if (tblManufacturer.getColumnModel().getColumnCount() > 0) {
            tblManufacturer.getColumnModel().getColumn(0).setResizable(false);
        }

        btnClearFilter.setText("Clear Filters");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        jLabel3.setText("Last Updated: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnSearchManYr, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnSearchSerial, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtSearchCity)
                                            .addComponent(txtSearchSerial)
                                            .addComponent(txtSerachManYr, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                        .addGap(129, 129, 129)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnSearchBrand)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(btnSearchModel)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtSearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtSeatMin, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSeatMax, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnSearchSeat)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(btnViewDetails)
                                .addGap(36, 36, 36)
                                .addComponent(btnSearchAvail)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchAllAvail)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchExpM))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnSearchCity))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnAllManufac)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 258, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClearFilter)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnClearFilter))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewDetails)
                    .addComponent(btnSearchAvail)
                    .addComponent(btnSearchExpM)
                    .addComponent(btnSearchAllAvail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearchSerial)
                            .addComponent(txtSearchSerial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearchBrand)
                            .addComponent(txtSearchBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchManYr)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSearchModel)
                                .addComponent(txtSearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(txtSerachManYr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchCity)
                    .addComponent(txtSearchCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtSeatMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearchSeat))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtSeatMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAllManufac)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(605, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblFleet.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row to view details", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            Fleet fleet = (Fleet) tblFleet.getValueAt(selectedRow, 0);
            ViewDetailsJPanel panel = new ViewDetailsJPanel(userProcessContainer, fleet, this.fleetDirectory);
            userProcessContainer.add("ViewDetailsJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void btnSearchSerialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSerialActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchSnumber(Integer.parseInt(txtSearchSerial.getText()));
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid serial number");
                populateTable();
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (Exception e) {
            populateTable();
            JOptionPane.showMessageDialog(null, "Please enter valid serial number");
        }
    }//GEN-LAST:event_btnSearchSerialActionPerformed

    private void btnSearchManYrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchManYrActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchManYr(Integer.parseInt(txtSerachManYr.getText()));
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid manufactured year");
                populateTable();
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid manufactured year");
            populateTable();
        }
    }//GEN-LAST:event_btnSearchManYrActionPerformed

    private void btnSearchAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAvailActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchAvailCar(true);
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "No cars available");
                populateTable();
            } else {
                populateSearchResults(result);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No cars available");
            populateTable();
        }
    }//GEN-LAST:event_btnSearchAvailActionPerformed

    private void btnSearchAllAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchAllAvailActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchAllAvailCar(true);
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "No cars available");
                populateTable();
            } else {
                populateSearchResults(result);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No cars available");
            populateTable();
        }
    }//GEN-LAST:event_btnSearchAllAvailActionPerformed

    private void txtSearchBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchBrandActionPerformed

    private void btnSearchBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBrandActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchBrand(txtSearchBrand.getText());
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid brand name");
                populateTable();
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid brand name");
            populateTable();
        }

    }//GEN-LAST:event_btnSearchBrandActionPerformed

    private void btnSearchModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchModelActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchModel(txtSearchModel.getText());
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid model name");
                populateTable();
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid model name");
            populateTable();
        }

    }//GEN-LAST:event_btnSearchModelActionPerformed

    private void btnSearchExpMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchExpMActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchExpMaintainedCars(false);
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "No cars with expired maintenance certificate");
                populateTable();
            } else {
                populateSearchResults(result);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "No cars with expired maintenance certificate");
            populateTable();
        }
    }//GEN-LAST:event_btnSearchExpMActionPerformed

    private void btnSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCityActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchCity(true, txtSearchCity.getText());
            if (result.size() == 0) {
                populateTable();
                JOptionPane.showMessageDialog(null, "Please enter valid City name");
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (NullPointerException e) {
            populateTable();
            JOptionPane.showMessageDialog(null, "Please enter valid City name");
        }
    }//GEN-LAST:event_btnSearchCityActionPerformed

    private void btnSearchSeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSeatActionPerformed
        // TODO add your handling code here:
        try {
            ArrayList<Fleet> result = fleetDirectory.searchSeat(Integer.parseInt(txtSeatMin.getText()), Integer.parseInt(txtSeatMax.getText()));
            if (result.size() == 0) {
                JOptionPane.showMessageDialog(null, "Please enter valid seat numbers");
                populateTable();
            } else {
                SearchResultsJPanel panel = new SearchResultsJPanel(userProcessContainer, result, fleetDirectory);
                userProcessContainer.add("SearchResultsJPanel", panel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        } catch (NullPointerException e) {
            populateTable();
            JOptionPane.showMessageDialog(null, "Please enter valid seat numbers");
        }
    }//GEN-LAST:event_btnSearchSeatActionPerformed

    private void btnAllManufacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllManufacActionPerformed
        // TODO add your handling code here:
        ArrayList<String> allBrand = fleetDirectory.getAllManufacturer();
        populateBrand(allBrand);
    }//GEN-LAST:event_btnAllManufacActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        // TODO add your handling code here:
        txtSearchBrand.setText("");
        txtSearchCity.setText("");
        txtSearchModel.setText("");
        txtSeatMin.setText("");
        txtSeatMax.setText("");
        txtSerachManYr.setText("");
        txtSearchSerial.setText("");
        populateTable();
    }//GEN-LAST:event_btnClearFilterActionPerformed
    public void populateBrand(ArrayList<String> brand) {
        DefaultTableModel dtmB = (DefaultTableModel) tblManufacturer.getModel();
        dtmB.setRowCount(0);
        Object[] row = new Object[dtmB.getColumnCount()];

        for (String s : brand) {
            row[0] = s;
            dtmB.addRow(row);
        }
    }

    public void populateSearchResults(ArrayList<Fleet> result) {
        DefaultTableModel dtm = (DefaultTableModel) tblFleet.getModel();
        dtm.setRowCount(0);
        Object[] row = new Object[dtm.getColumnCount()];

        for (Fleet f : result) {
            row[0] = f;
            row[1] = f.getModel_num();
            row[2] = f.getSerial_num();
            row[3] = f.getManufactured_year();
            row[4] = f.getMin_seats();
            row[5] = f.getMax_seats();
            row[6] = f.getAvailble_city();
            row[7] = f.isAvailable() ? "Yes" : "No";
            row[8] = f.isMaintenance_certificate() ? "Not Expired" : "Expired";
            dtm.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllManufac;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnSearchAllAvail;
    private javax.swing.JButton btnSearchAvail;
    private javax.swing.JButton btnSearchBrand;
    private javax.swing.JButton btnSearchCity;
    private javax.swing.JButton btnSearchExpM;
    private javax.swing.JButton btnSearchManYr;
    private javax.swing.JButton btnSearchModel;
    private javax.swing.JButton btnSearchSeat;
    private javax.swing.JButton btnSearchSerial;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDate;
    private javax.swing.JTable tblFleet;
    private javax.swing.JTable tblManufacturer;
    private javax.swing.JTextField txtSearchBrand;
    private javax.swing.JTextField txtSearchCity;
    private javax.swing.JTextField txtSearchModel;
    private javax.swing.JTextField txtSearchSerial;
    private javax.swing.JTextField txtSeatMax;
    private javax.swing.JTextField txtSeatMin;
    private javax.swing.JTextField txtSerachManYr;
    // End of variables declaration//GEN-END:variables
}
